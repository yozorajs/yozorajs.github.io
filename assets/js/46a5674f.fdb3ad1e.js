"use strict";(self.webpackChunk_yozora_doc=self.webpackChunk_yozora_doc||[]).push([[8112],{6156:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>x,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var s=i(7624),o=i(4552),t=i(6212),r=i(2440);const c={id:"core-tokenizer",title:"@yozora/core-tokenizer",sidebar_label:"core-tokenizer"},a=void 0,l={id:"package/core-tokenizer",title:"@yozora/core-tokenizer",description:"<img",source:"@site/docs/package/core-tokenizer.mdx",sourceDirName:"package",slug:"/package/core-tokenizer",permalink:"/docs/next/package/core-tokenizer",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"guanghechen",lastUpdatedAt:1706961465,formattedLastUpdatedAt:"Feb 3, 2024",frontMatter:{id:"core-tokenizer",title:"@yozora/core-tokenizer",sidebar_label:"core-tokenizer"},sidebar:"API",previous:{title:"ast-util",permalink:"/docs/next/package/ast-util"},next:{title:"core-parser",permalink:"/docs/next/package/core-parser"}},h={},d=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Block Tokenizer",id:"block-tokenizer",level:3},{value:"match-block phase",id:"match-block-phase",level:4},{value:"parse-block phase",id:"parse-block-phase",level:4},{value:"Additional in BlockTokenizer",id:"additional-in-blocktokenizer",level:4},{value:"Inline Tokenizer",id:"inline-tokenizer",level:3},{value:"match-inline phase",id:"match-inline-phase",level:4},{value:"parser-inline phase",id:"parser-inline-phase",level:4},{value:"Related",id:"related",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("header",{children:(0,s.jsxs)("div",{align:"center",children:[(0,s.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/core-tokenizer",children:(0,s.jsx)("img",{alt:"Npm Version",src:"https://img.shields.io/npm/v/@yozora/core-tokenizer/latest"})}),(0,s.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/core-tokenizer",children:(0,s.jsx)("img",{alt:"Npm Download",src:"https://img.shields.io/npm/dm/@yozora/core-tokenizer.svg"})}),(0,s.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/core-tokenizer",children:(0,s.jsx)("img",{alt:"Npm License",src:"https://img.shields.io/npm/l/@yozora/core-tokenizer.svg"})}),(0,s.jsx)("a",{href:"#install",children:(0,s.jsx)("img",{alt:"Module formats: cjs, esm",src:"https://img.shields.io/badge/module_formats-cjs%2C%20esm-green.svg"})}),(0,s.jsx)("a",{href:"https://github.com/nodejs/node",children:(0,s.jsx)("img",{alt:"Node.js Version",src:"https://img.shields.io/node/v/@yozora/core-tokenizer"})}),(0,s.jsx)("a",{href:"https://github.com/prettier/prettier",children:(0,s.jsx)("img",{alt:"Code Style: prettier",src:"https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square"})})]})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.p,{children:"Defines the shape of Yozora Tokenizer and life cycle methods, as well as some\nutility functions to assist in resolving tokens."}),"\n",(0,s.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,s.jsxs)(t.c,{groupId:"npm2yarn",children:[(0,s.jsx)(r.c,{value:"npm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install --save @yozora/core-tokenizer\n"})})}),(0,s.jsx)(r.c,{value:"yarn",label:"Yarn",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"yarn add @yozora/core-tokenizer\n"})})}),(0,s.jsx)(r.c,{value:"pnpm",label:"pnpm",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm add @yozora/core-tokenizer\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.p,{children:"According to the Parse Strategy, there are two types of tokenizers: Block\nTokenizer and Inline tokenizer."}),"\n",(0,s.jsx)(n.h3,{id:"block-tokenizer",children:"Block Tokenizer"}),"\n",(0,s.jsx)(n.p,{children:"The parsing steps of the block tokenizer are divided into three life cycles:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"match-block"}),": processing literal text and produce ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/token.ts#L41",children:"BlockToken"}),"s."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"parse-block"}),": processing ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/token.ts#L41",children:"BlockToken"}),"s into ",(0,s.jsx)(n.a,{href:"./ast#node",children:"AST Node"}),"s"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"match-block-phase",children:"match-block phase"}),"\n",(0,s.jsx)(n.p,{children:"In the process of parsing block nodes, the content is read line by line. The\nblock-level node has a nested structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",metastring:"{2}",children:"> This is a blockquote\n> - This is a list item in blockquote\n> - # This is a setext heading in the list item of the blockquote\n> - > ...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As shown in the second line of the above code, when parsing\n",(0,s.jsx)(n.a,{href:"./tokenizer-list",children:"ListItem"}),", it cannot get the first character in\nthe original document line, but wait for its ancestor elements along the\nexisting nesting structure (such as the above ",(0,s.jsx)(n.a,{href:"./tokenizer-blockquote",children:"Blockquote"}),")\nto complete the matching, and then gets a matching opportunity. In order to make\nthe tokenizers work with each other transparently, when designing the life cycle\nmethods of the block-level tokenizer in the ",(0,s.jsx)(n.code,{children:"match-block"})," stage, the parsing\nlogic of the nested structure lifted into ",(0,s.jsx)(n.a,{href:"./core-parser",children:"@yozora/core-parser "}),", and use a\nspecial data structure called ",(0,s.jsx)(n.code,{children:"PhrasingContentLine"})," as the actual parsing unit\nof a line:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export interface PhrasingContentLine {\n  /**\n   * Start index of interval in nodePoints.\n   */\n  startIndex: number\n  /**\n   * End index of interval in nodePoints.\n   */\n  endIndex: number\n  /**\n   * Array of NodePoint which contains all the contents of this line.\n   */\n  nodePoints: ReadonlyArray<INodePoint>\n  /**\n   * The index of first non-blank character in the rest of the current line\n   */\n  firstNonWhitespaceIndex: number\n  /**\n   * The precede space count, one tab equals four space.\n   * @see https://github.github.com/gfm/#tabs\n   */\n  countOfPrecedeSpaces: number\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The life cycle methods at this stage is subdivided into the following methods\n(see [match-block][lifecycle-match-block] for the type definition details):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"isContainingBlock"}),": (Required) Indicate that whether if it is a container block."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"eatOpener"}),": (Required) Try to match a new block node."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"eatAndInterruptPreviousSibling"}),": (optional) try to interrupt the previous\nsibling node and match a new block node."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"eatContinuationText"}),": (Optional) Try to match the continuation text of current\nblock node, that is, consume the current ",(0,s.jsx)(n.code,{children:"PhrasingContentLine"})," with the current\nblock node. There may be many kinds of results at this stage, which are\ndistinguished according to the value of ",(0,s.jsx)(n.code,{children:"status"})," in the returned result:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"notMatched"}),": Not matched."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"closing"}),": Matched and this is the last line of the current block node.\nThat is, the current block node is in a saturated state and is closing."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"opening"}),": Matched, and not closing yet."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"failedAndRollback"}),": The match fails, and the content of the previous lines\nare to be rolled back. For convenience, it is assumed that the rollback\noperation does not affect the previously satisfied nested structure."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"closingAndRollback"}),": Matching failed, but only the last line needs to be\nrollback, the current node is still a valid one and will be closed soon."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"eatLazyContinuationText"}),": (Optional) Try to match Laziness Continuation Text.\nActually only the ",(0,s.jsx)(n.a,{href:"./tokenizer-paragraph",children:"@yozora/tokenizer-paragraph"})," needs to implement this\nmethod, see ",(0,s.jsx)(n.a,{href:"https://github.github.com/gfm/#phase-1-block-structure",children:"https://github.github.com/gfm/#phase-1-block-structure"})," step3\nfor details."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"onClose"}),": (Optional) Called when the current node is closed, used to perform some cleanup operations."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parse-block-phase",children:"parse-block phase"}),"\n",(0,s.jsx)(n.p,{children:"The life cycle methods at this stage is subdivided into the following methods\n(see [parse-block][lifecycle-parse-block] for the complete type definition):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parse"}),": Processing a specified type token list to ",(0,s.jsx)(n.a,{href:"./ast#node",children:"AST Node"})," list."]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"additional-in-blocktokenizer",children:["Additional in ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/tokenizer.ts#L39",children:"BlockTokenizer"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"extractPhrasingContentLines"}),": (Optional) Convert a Block Token generated by\nthe current tokenizer to ",(0,s.jsx)(n.code,{children:"PhrasingContentLines[]"}),". This method is only needed\nwhen the matching node of this type may be rolled back."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"buildBlockToken"}),": (Optional) Convert ",(0,s.jsx)(n.code,{children:"PhrasingContentLines[]"})," into a Block Token.\nThis method is only needed when the matching node of this type may be rolled back"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"inline-tokenizer",children:"Inline Tokenizer"}),"\n",(0,s.jsx)(n.p,{children:"The parsing step of the inline parser is divided into two life cycles"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"match-inline"}),": processing literal text and produce ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/token.ts#L55",children:"InlineToken"}),"s."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parse-inline"}),": processing ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/token.ts#L55",children:"InlineToken"}),"s into ",(0,s.jsx)(n.a,{href:"./ast#node",children:"AST Node"}),"s."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"match-inline-phase",children:"match-inline phase"}),"\n",(0,s.jsxs)(n.p,{children:['After a block node is closed, we can start matching inline nodes, so when we\nmatch inline nodes, we get a continuous text without the concept of "line".\nBut inline nodes have priority. For example, link has a higher priority than\nemphasis (see ',(0,s.jsx)(n.a,{href:"https://github.github.com/gfm/#example-529",children:"https://github.github.com/gfm/#example-529"}),"). In order to enable\nunperceptual coordination between tokenizers, when designing the life cycle\nfunction of the inline tokenizer in the ",(0,s.jsx)(n.code,{children:"match-inline"})," phase, put priority-related\nlogic in ",(0,s.jsx)(n.a,{href:"./core-parser",children:"@yozora/core-parser"})," In processing, each tokenizer only provides\nfour types of separators: ",(0,s.jsx)(n.code,{children:"opener"}),", ",(0,s.jsx)(n.code,{children:"both"}),", ",(0,s.jsx)(n.code,{children:"closer"}),", ",(0,s.jsx)(n.code,{children:"full"}),". Then the\nprocessor in ",(0,s.jsx)(n.a,{href:"./core-parser",children:"@yozora/core-parser"})," completes the coordination work."]}),"\n",(0,s.jsx)(n.p,{children:"The lifecycle methods at this stage is subdivided into the following methods\n(see [match-inline][lifecycle-match-inline] for the complete type definition):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"findDelimiter"}),": (Required) Find a delimiter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isDelimiterPair"}),": (Optional) Check whether the given two delimiters can match"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"processDelimiterPair"}),": (Optional) Process the matched two delimiters. Such as ",(0,s.jsx)(n.a,{href:"./tokenizer-emphasis",children:"@yozora/tokenizer-emphasis"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"processSingleDelimiter"}),":  (Optional) Process a single delimiter. Such as ",(0,s.jsx)(n.a,{href:"./tokenizer-text",children:"@yozora/tokenizer-text"})]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"parser-inline-phase",children:"parser-inline phase"}),"\n",(0,s.jsx)(n.p,{children:"The lifecycle methods at this stage is subdivided into the following methods\n(see [parse-inline][lifecycle-pase-inline] for the complete type definition):"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parse"}),": Processing a specified type token list to ",(0,s.jsx)(n.a,{href:"./ast#node",children:"AST Node"})," list."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/tree/main/packages/core-tokenizer",children:"Sourcecode"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/tree/main/packages/template-tokenizer#readme",children:"@yozora/template-tokenizer"})," For creating a Yozora Tokenizer."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Block Tokenizer Lifecycle"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["match-block: ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/match-block/api.ts#L7",children:"IMatchBlockPhaseApi"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/match-block/hook.ts#L16",children:"IMatchBlockHook"})]}),"\n",(0,s.jsxs)(n.li,{children:["parse-block: ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/parse-block/api.ts#L8",children:"IParseBlockPhaseApi"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/parse-block/hook.ts#L16",children:"IParseBlockHook"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Inline Tokenizer Lifecycle"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["match-inline: ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/match-inline/api.ts#L7",children:"IMatchInlinePhaseApi"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/match-inline/hook.ts#L16",children:"IMatchInlineHook"})]}),"\n",(0,s.jsxs)(n.li,{children:["parse-inline: ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/parse-inline/api.ts#L8",children:"IParseInlinePhaseApi"}),", ",(0,s.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/blob/fbbaf365ad9a16130cc14d40da845908e0099549/packages/core-tokenizer/src/types/parse-inline/hook.ts#L16",children:"IParseInlineHook"})]}),"\n"]}),"\n"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);