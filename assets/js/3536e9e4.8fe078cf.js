"use strict";(self.webpackChunk_yozora_doc=self.webpackChunk_yozora_doc||[]).push([[5461],{1181:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var r=t(4848),s=t(8453),a=t(9489),i=t(7227);const o={id:"ast",title:"@yozora/ast",sidebar_label:"ast"},l=void 0,p={id:"package/ast",title:"@yozora/ast",description:"<img",source:"@site/docs/package/ast.mdx",sourceDirName:"package",slug:"/package/ast",permalink:"/docs/next/package/ast",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"guanghechen",lastUpdatedAt:1710076334,formattedLastUpdatedAt:"Mar 10, 2024",frontMatter:{id:"ast",title:"@yozora/ast",sidebar_label:"ast"},sidebar:"API",next:{title:"ast-util",permalink:"/docs/next/package/ast-util"}},c={},d=[{value:"Install",id:"install",level:2},{value:"Core Types",id:"core-types",level:2},{value:"Node",id:"node",level:3},{value:"Parent",id:"parent",level:3},{value:"Literal",id:"literal",level:3},{value:"Resource",id:"resource",level:3},{value:"Association",id:"association",level:3},{value:"Reference",id:"reference",level:3},{value:"Alternative",id:"alternative",level:3},{value:"Point",id:"point",level:3},{value:"Position",id:"position",level:3},{value:"NodeType",id:"nodetype",level:3},{value:"AlignType",id:"aligntype",level:3},{value:"Yast nodes",id:"yast-nodes",level:2},{value:"Admonition",id:"admonition",level:3},{value:"Blockquote",id:"blockquote",level:3},{value:"Break",id:"break",level:3},{value:"Code",id:"code",level:3},{value:"Definition",id:"definition",level:3},{value:"Delete",id:"delete",level:3},{value:"EcmaImport",id:"ecmaimport",level:3},{value:"Emphasis",id:"emphasis",level:3},{value:"FootnoteDefinition",id:"footnotedefinition",level:3},{value:"FootnoteReference",id:"footnotereference",level:3},{value:"Footnote",id:"footnote",level:3},{value:"Frontmatter (not supportted yet)",id:"frontmatter-not-supportted-yet",level:3},{value:"Heading",id:"heading",level:3},{value:"Html",id:"html",level:3},{value:"Image",id:"image",level:3},{value:"ImageReference",id:"imagereference",level:3},{value:"InlineCode",id:"inlinecode",level:3},{value:"InlineMath",id:"inlinemath",level:3},{value:"Link",id:"link",level:3},{value:"LinkReference",id:"linkreference",level:3},{value:"List",id:"list",level:3},{value:"ListItem",id:"listitem",level:3},{value:"Math",id:"math",level:3},{value:"Paragraph",id:"paragraph",level:3},{value:"Strong",id:"strong",level:3},{value:"Table",id:"table",level:3},{value:"TableCell",id:"tablecell",level:3},{value:"TableRow",id:"tablerow",level:3},{value:"Text",id:"text",level:3},{value:"ThematicBreak",id:"thematicbreak",level:3},{value:"Related",id:"related",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("header",{children:(0,r.jsxs)("div",{align:"center",children:[(0,r.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/ast",children:(0,r.jsx)("img",{alt:"Npm Version",src:"https://img.shields.io/npm/v/@yozora/ast/latest"})}),(0,r.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/ast",children:(0,r.jsx)("img",{alt:"Npm Download",src:"https://img.shields.io/npm/dm/@yozora/ast.svg"})}),(0,r.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/ast",children:(0,r.jsx)("img",{alt:"Npm License",src:"https://img.shields.io/npm/l/@yozora/ast.svg"})}),(0,r.jsx)("a",{href:"#install",children:(0,r.jsx)("img",{alt:"Module formats: cjs, esm",src:"https://img.shields.io/badge/module_formats-cjs%2C%20esm-green.svg"})}),(0,r.jsx)("a",{href:"https://github.com/nodejs/node",children:(0,r.jsx)("img",{alt:"Node.js Version",src:"https://img.shields.io/node/v/@yozora/ast"})}),(0,r.jsx)("a",{href:"https://github.com/prettier/prettier",children:(0,r.jsx)("img",{alt:"Code Style: prettier",src:"https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square"})})]})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,r.jsxs)(a.A,{groupId:"npm2yarn",children:[(0,r.jsx)(i.A,{value:"npm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install --save @yozora/ast\n"})})}),(0,r.jsx)(i.A,{value:"yarn",label:"Yarn",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add @yozora/ast\n"})})}),(0,r.jsx)(i.A,{value:"pnpm",label:"pnpm",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add @yozora/ast\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"core-types",children:"Core Types"}),"\n",(0,r.jsx)(n.h3,{id:"node",children:"Node"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * Syntactic units of the yozora AST.\n * @see https://github.com/syntax-tree/unist#node\n */\nexport interface Node<T extends NodeType = NodeType> {\n  /**\n   * The variant of a node.\n   */\n  readonly type: T\n  /**\n   * Location of a node in a source document.\n   * Must not be present if a node is generated.\n   */\n  position?: Position\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parent",children:"Parent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * Nodes containing other nodes.\n * @see https://github.com/syntax-tree/mdast#parent\n */\nexport interface Parent<T extends NodeType = NodeType>\n  extends Node<T> {\n  /**\n   * List representing the children of a node.\n   */\n  children: Node[]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"literal",children:"Literal"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * Nodes containing a value.\n */\nexport interface Literal<T extends NodeType = NodeType>\n  extends Node<T> {\n  /**\n   * Literal value.\n   */\n  value: string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"resource",children:"Resource"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * A reference to resource.\n * @see https://github.com/syntax-tree/mdast#resource\n */\nexport interface Resource {\n  /**\n   * A URL to the referenced resource.\n   */\n  url: string\n  /**\n   * Advisory information for the resource, such as would be\n   * appropriate for a tooltip.\n   */\n  title?: string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"association",children:"Association"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * An internal relation from one node to another.\n * @see https://github.com/syntax-tree/mdast#association\n */\nexport interface Association {\n  /**\n   * It can match an identifier field on another node.\n   */\n  identifier: string\n  /**\n   * The original value of the normalized identifier field.\n   */\n  label: string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reference",children:"Reference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * A marker that is associated to another node.\n * @see https://github.com/syntax-tree/mdast#reference\n */\nexport interface Reference {\n  /**\n   * The explicitness of a reference:\n   *  - shortcut: the reference is implicit, its identifier inferred from its content\n   *  - collapsed: the reference is explicit, its identifier inferred from its content\n   *  - full: the reference is explicit, its identifier explicitly set\n   * @see https://github.com/syntax-tree/mdast#referencetype\n   */\n  referenceType: 'full' | 'collapsed' | 'shortcut'\n}\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alternative",children:"Alternative"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * Alternative represents a node with a fallback.\n * @see https://github.com/syntax-tree/mdast#alternative\n */\nexport interface Alternative {\n  /**\n   * Equivalent content for environments that cannot represent the\n   * node as intended.\n   */\n  alt: string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"point",children:"Point"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * One place in the source file.\n * @see https://github.com/syntax-tree/unist#point\n */\nexport interface Point {\n  /**\n   * Line in a source file.\n   * @minimum 1\n   */\n  readonly line: number\n  /**\n   * Column column in a source file.\n   * @minimum 1\n   */\n  readonly column: number\n  /**\n   * Character in a source file.\n   * @minimum 0\n   */\n  readonly offset?: number\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"position",children:"Position"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * Location of a node in a source file.\n * @see https://github.com/syntax-tree/unist#position\n */\nexport interface Position {\n  /**\n   * Place of the first character of the parsed source region.\n   */\n  start: Point\n  /**\n   * Place of the first character after the parsed source region.\n   */\n  end: Point\n  /**\n   * start column at each index (plus start line) in the source region,\n   * for elements that span multiple lines\n   */\n  indent?: number[]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"nodetype",children:"NodeType"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * Variant of a node of yozora AST.\n */\nexport type NodeType = string\n"})}),"\n",(0,r.jsx)(n.h3,{id:"aligntype",children:"AlignType"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/**\n * AlignType represents how phrasing content is aligned\n * @see https://github.com/syntax-tree/mdast#aligntype\n */\nexport type AlignType = 'left' | 'right' | 'center' | null\n"})}),"\n",(0,r.jsx)(n.h2,{id:"yast-nodes",children:"Yast nodes"}),"\n",(0,r.jsx)(n.h3,{id:"admonition",children:"Admonition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const AdmonitionType = 'admonition'\nexport type AdmonitionType = typeof AdmonitionType\n\n/**\n * Admonitions are block elements. The titles can include inline markdown and\n * the body can include any block markdown except another admonition.\n * @see https://github.com/elviswolcott/remark-admonitions\n */\nexport interface Admonition extends Parent<AdmonitionType> {\n  /**\n   * Keyword of an admonition.\n   */\n  keyword: 'note' | 'important' | 'tip' | 'caution' | 'warning' | string\n  /**\n   * Admonition title.\n   */\n  title: Node[]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"blockquote",children:"Blockquote"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const BlockquoteType = 'blockquote'\nexport type BlockquoteType = typeof BlockquoteType\n\n/**\n * Blockquote represents a section quoted from somewhere else.\n * @see https://github.com/syntax-tree/mdast#blockquote\n * @see https://github.github.com/gfm/#block-quotes\n */\nexport type Blockquote = Parent<BlockquoteType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"break",children:"Break"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const BreakType = 'break'\nexport type BreakType = typeof BreakType\n\n/**\n * Break represents a line break, such as in poems or addresses.\n * @see https://github.com/syntax-tree/mdast#break\n * @see https://github.github.com/gfm/#hard-line-breaks\n * @see https://github.github.com/gfm/#soft-line-breaks\n */\nexport type Break = Node<BreakType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"code",children:"Code"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const CodeType = 'code'\nexport type CodeType = typeof CodeType\n\n/**\n * Code represents a block of preformatted text, such as ASCII art or computer\n * code.\n * @see https://github.com/syntax-tree/mdast#code\n * @see https://github.github.com/gfm/#code-fence\n */\nexport interface Code extends Literal<CodeType> {\n  /**\n   * Language of the codes\n   */\n  lang?: string\n  /**\n   * Meta info string\n   */\n  meta?: string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const DefinitionType = 'definition'\nexport type DefinitionType = typeof DefinitionType\n\n/**\n * Definition represents a resource.\n * @see https://github.com/syntax-tree/mdast#definition\n * @see https://github.github.com/gfm/#link-reference-definitions\n */\nexport interface Definition\n  extends Node<DefinitionType>,\n    Association,\n    Resource {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"delete",children:"Delete"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const DeleteType = 'delete'\nexport type DeleteType = typeof DeleteType\n\n/**\n * Delete represents contents that are no longer accurate or no longer relevant.\n * @see https://github.com/syntax-tree/mdast#delete\n * @see https://github.github.com/gfm/#strikethrough-extension-\n */\nexport type Delete = Parent<DeleteType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ecmaimport",children:"EcmaImport"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const EcmaImportType = 'ecmaImport'\nexport type EcmaImportType = typeof EcmaImportType\n\nexport interface EcmaImport extends Node<EcmaImportType> {\n  /**\n   * import Parser from '@yozora/parser'\n   * ==> { moduleName: '@yozora/parser' }\n   */\n  moduleName: string\n  /**\n   * import Parser, { YozoraParserProps } from '@yozora/parser'\n   * ==> { defaultImport: 'Parser' }\n   */\n  defaultImport: string | null\n  /**\n   * import { YozoraParserProps, YozoraParser as Parser } from '@yozora/parser'\n   * ==>  {\n   *        namedImports: [\n   *          { src: 'YozoraParserProps', alias: null },\n   *          { src: 'YozoraParser', alias: 'Parser' },\n   *        ]\n   *      }\n   */\n  namedImports: IEcmaImportNamedImport[]\n}\n\n/**\n *\n * import { YozoraParserProps, YozoraParser as Parser } from '@yozora/parser'\n * ==>  [\n *        { src: 'YozoraParserProps', alias: null },\n *        { src: 'YozoraParser', alias: 'Parser' },\n *      ]\n */\nexport interface IEcmaImportNamedImport {\n  /**\n   *\n   */\n  src: string\n  /**\n   *\n   */\n  alias: string | null\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"emphasis",children:"Emphasis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const EmphasisType = 'emphasis'\nexport type EmphasisType = typeof EmphasisType\n\n/**\n * Emphasis represents stress emphasis of its contents.\n * @see https://github.com/syntax-tree/mdast#emphasis\n * @see https://github.github.com/gfm/#emphasis-and-strong-emphasis\n */\nexport type Emphasis = Parent<EmphasisType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"footnotedefinition",children:"FootnoteDefinition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const FootnoteDefinitionType = 'footnoteDefinition'\nexport type FootnoteDefinitionType = typeof FootnoteDefinitionType\n\n/**\n * FootnoteDefinition represents content relating to the document that is\n * outside its flow.\n * @see https://github.com/syntax-tree/mdast#footnotedefinition\n */\nexport interface FootnoteDefinition\n  extends Parent<FootnoteDefinitionType>, Association {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"footnotereference",children:"FootnoteReference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const FootnoteReferenceType = 'footnoteReference'\nexport type FootnoteReferenceType = typeof FootnoteReferenceType\n\n/**\n * FootnoteReference represents a marker through association.\n *\n * Similar to imageReference and linkReference, the difference is that it has\n * only 'collapsed' reference type instead of 'full' and 'shortcut'\n * @see https://github.com/syntax-tree/mdast#footnotereference\n * @see https://github.com/syntax-tree/mdast#imagereference\n * @see https://github.com/syntax-tree/mdast#linkreference\n */\nexport interface FootnoteReference\n  extends Node<FootnoteReferenceType>, Association {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"footnote",children:"Footnote"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const FootnoteType = 'footnote'\nexport type FootnoteType = typeof FootnoteType\n\n/**\n * Footnote represents content relating to the document that is outside its flow.\n * @see https://github.com/syntax-tree/mdast#footnote\n */\nexport type Footnote = Parent<FootnoteType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"frontmatter-not-supportted-yet",children:"Frontmatter (not supportted yet)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const FrontmatterType = 'frontmatter'\nexport type FrontmatterType = typeof FrontmatterType\n\n/**\n * Frontmatter  content represent out-of-band information about the document.\n * @see https://github.com/syntax-tree/mdast#frontmattercontent\n * @see https://github.com/syntax-tree/mdast#yaml\n * @see https://github.github.com/gfm/#code-fence\n */\nexport interface Frontmatter extends Literal<FrontmatterType> {\n  /**\n   * Language of the frontmatter\n   * @default 'yaml'\n   */\n  lang: string\n  /**\n   * Meta info string\n   */\n  meta?: string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"heading",children:"Heading"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const HeadingType = 'heading'\nexport type HeadingType = typeof HeadingType\n\n/**\n * Frontmatter  represents a heading of a section.\n * @see https://github.com/syntax-tree/mdast#heading\n * @see https://github.github.com/gfm/#atx-heading\n */\nexport interface Heading extends Parent<HeadingType> {\n  /**\n   * level of heading\n   */\n  depth: 1 | 2 | 3 | 4 | 5 | 6\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"html",children:"Html"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const HtmlType = 'html'\nexport type HtmlType = typeof HtmlType\n\n/**\n * HTML (Literal) represents a fragment of raw HTML.\n * @see https://github.com/syntax-tree/mdast#html\n * @see https://github.github.com/gfm/#html-blocks\n * @see https://github.github.com/gfm/#raw-html\n */\nexport type Html = Literal<HtmlType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"image",children:"Image"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const ImageType = 'image'\nexport type ImageType = typeof ImageType\n\n/**\n * Image represents an image.\n * @see https://github.com/syntax-tree/mdast#image\n * @see https://github.github.com/gfm/#images\n */\nexport interface Image\n  extends Node<ImageType>,\n    Resource,\n    Alternative {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"imagereference",children:"ImageReference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const ImageReferenceType = 'imageReference'\nexport type ImageReferenceType = typeof ImageReferenceType\n\n/**\n * ImageReference represents an image through association, or its original\n * source if there is no association.\n * @see https://github.github.com/gfm/#images\n * @see https://github.com/syntax-tree/mdast#imagereference\n */\nexport interface ImageReference\n  extends Node<ImageReferenceType>,\n    Association,\n    Reference,\n    Alternative {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inlinecode",children:"InlineCode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const InlineCodeType = 'inlineCode'\nexport type InlineCodeType = typeof InlineCodeType\n\n/**\n * InlineCode represents a fragment of computer code, such as a file name,\n * computer program, or anything a computer could parse.\n * @see https://github.com/syntax-tree/mdast#inline-code\n * @see https://github.github.com/gfm/#code-span\n */\nexport type InlineCode = Literal<InlineCodeType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inlinemath",children:"InlineMath"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const InlineMathType = 'inlineMath'\nexport type InlineMathType = typeof InlineMathType\n\n/**\n * Inline math content.\n */\nexport type InlineMath = Literal<InlineMathType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"link",children:"Link"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const LinkType = 'link'\nexport type LinkType = typeof LinkType\n\n/**\n * Link represents a hyperlink.\n * @see https://github.com/syntax-tree/mdast#link\n * @see https://github.github.com/gfm/#inline-link\n */\nexport interface Link extends Parent<LinkType>, Resource {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"linkreference",children:"LinkReference"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const LinkReferenceType = 'linkReference'\nexport type LinkReferenceType = typeof LinkReferenceType\n\n/**\n * LinkReference represents a hyperlink through association, or its original\n * source if there is no association.\n * @see https://github.com/syntax-tree/mdast#linkreference\n * @see https://github.github.com/gfm/#reference-link\n */\nexport interface LinkReference\n  extends Parent<LinkReferenceType>,\n    Association,\n    Reference {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"list",children:"List"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const ListType = 'list'\nexport type ListType = typeof ListType\n\n/**\n * List represents a list of items.\n * @see https://github.com/syntax-tree/mdast#list\n * @see https://github.github.com/gfm/#list\n */\nexport interface List extends Parent<ListType> {\n  /**\n   * Whether it is an ordered lit.\n   */\n  ordered: boolean\n  /**\n   * Marker type of the list.\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol#attr-type\n   * \n   * The 'i' and 'I' which represented the roman numerals are not supported yet.\n   */\n  orderType?: '1' | 'a' | 'A' | 'i' | 'I'\n  /**\n   * The starting number of a ordered list-item.\n   */\n  start?: number\n  /**\n   * Marker of a unordered list-item, or delimiter of an ordered list-item.\n   */\n  marker: number\n  /**\n   * Whether if the list is loose.\n   * @see https://github.github.com/gfm/#loose\n   */\n  spread: boolean\n  /**\n   * Lists are container block.\n   */\n  children: ListItem[]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"listitem",children:"ListItem"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const ListItemType = 'listItem'\nexport type ListItemType = typeof ListItemType\n\n/**\n * Status of a task list item.\n * @see https://github.github.com/gfm/#task-list-items-extension-\n */\nexport enum TaskStatus {\n  /**\n   * To do, not yet started.\n   */\n  TODO = 'todo',\n  /**\n   * In progress.\n   */\n  DOING = 'doing',\n  /**\n   * Completed.\n   */\n  DONE = 'done',\n}\n\n/**\n * ListItem represents an item in a List.\n * @see https://github.com/syntax-tree/mdast#listitem\n * @see https://github.github.com/gfm/#list-items\n */\nexport interface ListItem extends Parent<ListItemType> {\n  /**\n   * Status of a todo task.\n   */\n  status?: TaskStatus\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"math",children:"Math"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const MathType = 'math'\nexport type MathType = typeof MathType\n\n/**\n * Math content.\n */\nexport type Math = Literal<MathType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"paragraph",children:"Paragraph"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const ParagraphType = 'paragraph'\nexport type ParagraphType = typeof ParagraphType\n\n/**\n * Paragraph represents a unit of discourse dealing with a particular\n * point or idea.\n * @see https://github.com/syntax-tree/mdast#paragraph\n * @see https://github.github.com/gfm/#paragraphs\n */\nexport type Paragraph = Parent<ParagraphType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"strong",children:"Strong"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const StrongType = 'strong'\nexport type StrongType = typeof StrongType\n\n/**\n * Strong represents strong importance, seriousness, or urgency for its\n * contents.\n * @see https://github.com/syntax-tree/mdast#strong\n * @see https://github.github.com/gfm/#emphasis-and-strong-emphasis\n */\nexport type Strong = Parent<StrongType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"table",children:"Table"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const TableType = 'table'\nexport type TableType = typeof TableType\n\n/**\n * Table column configs.\n */\nexport interface TableColumn {\n  /**\n   * An align field can be present. If present, it must be a list of alignTypes.\n   * It represents how cells in columns are aligned.\n   */\n  align: AlignType\n}\n\n/**\n * @see https://github.github.com/gfm/#table\n * @see https://github.com/syntax-tree/mdast#table\n */\nexport interface Table extends Parent<TableType> {\n  /**\n   * Table column configuration items\n   */\n  columns: TableColumn[]\n  /**\n   * Table rows (include table headers)\n   */\n  children: TableRow[]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tablecell",children:"TableCell"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const TableCellType = 'tableCell'\nexport type TableCellType = typeof TableCellType\n\n/**\n * TableCell represents a header cell in a Table, if its parent is a head,\n * or a data cell otherwise.\n * @see https://github.com/syntax-tree/mdast#tablecell\n * @see https://github.github.com/gfm/#tables-extension-\n */\nexport type TableCell = Parent<TableCellType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tablerow",children:"TableRow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const TableRowType = 'tableRow'\nexport type TableRowType = typeof TableRowType\n\n/**\n * TableRow represents a row of cells in a table.\n * @see https://github.com/syntax-tree/mdast#tablerow\n * @see https://github.github.com/gfm/#tables-extension-\n */\nexport interface TableRow extends Parent<TableRowType> {\n  /**\n   * Table cells\n   */\n  children: TableCell[]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"text",children:"Text"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const TextType = 'text'\nexport type TextType = typeof TextType\n\n/**\n * Text represents everything that is just text.\n * @see https://github.com/syntax-tree/mdast#text\n * @see https://github.github.com/gfm/#textual-content\n */\nexport type Text = Literal<TextType>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"thematicbreak",children:"ThematicBreak"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const ThematicBreakType = 'thematicBreak'\nexport type ThematicBreakType = typeof ThematicBreakType\n\n/**\n * ThematicBreak represents a thematic break, such as a scene change in\n * a story, a transition to another topic, or a new document.\n * @see https://github.com/syntax-tree/mdast#thematicbreak\n * @see https://github.github.com/gfm/#thematic-break\n */\nexport type ThematicBreak = Node<ThematicBreakType>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.github.com/gfm/",children:"Github Flavor Markdown"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/syntax-tree/mdast",children:"Mdast"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/tree/main/packages/ast",children:"Sourcecode"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);