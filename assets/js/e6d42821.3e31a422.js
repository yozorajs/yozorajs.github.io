"use strict";(self.webpackChunk_yozora_doc=self.webpackChunk_yozora_doc||[]).push([[2276],{6492:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>j,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var i=s(7624),r=s(4552),t=s(6212),a=s(2440),c=s(7360);const l={id:"tokenizer-inline-code",title:"@yozora/tokenizer-inline-code",sidebar_label:"inline-code"},o=void 0,d={id:"package/tokenizer-inline-code",title:"@yozora/tokenizer-inline-code",description:"<img",source:"@site/docs/package/tokenizer-inline-code.mdx",sourceDirName:"package",slug:"/package/tokenizer-inline-code",permalink:"/docs/next/package/tokenizer-inline-code",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"guanghechen",lastUpdatedAt:1706961465,formattedLastUpdatedAt:"Feb 3, 2024",frontMatter:{id:"tokenizer-inline-code",title:"@yozora/tokenizer-inline-code",sidebar_label:"inline-code"},sidebar:"Docs",previous:{title:"indented-code",permalink:"/docs/next/package/tokenizer-indented-code"},next:{title:"inline-math",permalink:"/docs/next/package/tokenizer-inline-math"}},h={},p=[{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:3},{value:"Types",id:"types",level:3},{value:"Live Examples",id:"live-examples",level:2},{value:"Related",id:"related",level:2}];function x(e){const n={a:"a",admonition:"admonition",annotation:"annotation",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",math:"math",mi:"mi",mrow:"mrow",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("header",{children:(0,i.jsxs)("div",{align:"center",children:[(0,i.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/tokenizer-inline-code",children:(0,i.jsx)("img",{alt:"Npm Version",src:"https://img.shields.io/npm/v/@yozora/tokenizer-inline-code/latest"})}),(0,i.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/tokenizer-inline-code",children:(0,i.jsx)("img",{alt:"Npm Download",src:"https://img.shields.io/npm/dm/@yozora/tokenizer-inline-code.svg"})}),(0,i.jsx)("a",{href:"https://www.npmjs.com/package/@yozora/tokenizer-inline-code",children:(0,i.jsx)("img",{alt:"Npm License",src:"https://img.shields.io/npm/l/@yozora/tokenizer-inline-code.svg"})}),(0,i.jsx)("a",{href:"#install",children:(0,i.jsx)("img",{alt:"Module formats: cjs, esm",src:"https://img.shields.io/badge/module_formats-cjs%2C%20esm-green.svg"})}),(0,i.jsx)("a",{href:"https://github.com/nodejs/node",children:(0,i.jsx)("img",{alt:"Node.js Version",src:"https://img.shields.io/node/v/@yozora/tokenizer-inline-code"})}),(0,i.jsx)("a",{href:"https://github.com/facebook/jest",children:(0,i.jsx)("img",{alt:"Tested with Jest",src:"https://img.shields.io/badge/tested_with-jest-9c465e.svg"})}),(0,i.jsx)("a",{href:"https://github.com/prettier/prettier",children:(0,i.jsx)("img",{alt:"Code Style: prettier",src:"https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square"})})]})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.admonition,{title:"github flavor markdown spec",type:"note",children:[(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#backtick-string",children:"backtick string"})," is a string of one or more backtick\ncharacters (",(0,i.jsx)(n.code,{children:"`"}),") that is neither preceded nor followed by a backtick."]}),(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#code-span",children:"code span"})," begins with a ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#backtick-string",children:"backtick string"}),"\nand ends with a ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#backtick-string",children:"backtick string"})," of equal length. The\ncontents of the code span are the characters between the two backtick strings,\nnormalized in the following ways:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["First, ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#line-ending",children:"line endings"})," are converted to ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#space",children:"spaces"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If the resulting string both begins and ends with a ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#space",children:"space"}),"\ncharacter, but does not consist entirely of ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#space",children:"space"})," characters,\na single ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#space",children:"space"})," character is removed from the front and back.\nThis allows you to include code that begins or ends with backtick characters,\nwhich must be separated by ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#whitespace",children:"whitespace"})," from the opening or\nclosing backtick strings."]}),"\n"]}),"\n"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["See ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#code-span",children:"github flavor markdown spec"})})," for details."]}),"\n",(0,i.jsxs)(n.li,{children:["See ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"#live-examples",children:"Live Examples"})})," for an intuitive impression."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsxs)(t.c,{groupId:"npm2yarn",children:[(0,i.jsx)(a.c,{value:"npm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save @yozora/tokenizer-inline-code\n"})})}),(0,i.jsx)(a.c,{value:"yarn",label:"Yarn",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @yozora/tokenizer-inline-code\n"})})}),(0,i.jsx)(a.c,{value:"pnpm",label:"pnpm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm add @yozora/tokenizer-inline-code\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"./tokenizer-inline-code",children:"@yozora/tokenizer-inline-code"})," has been integrated into ",(0,i.jsx)(n.a,{href:"./parser",children:"@yozora/parser"})," / ",(0,i.jsx)(n.a,{href:"./parser-gfm-ex",children:"@yozora/parser-gfm-ex"})," / ",(0,i.jsx)(n.a,{href:"./parser-gfm",children:"@yozora/parser-gfm"}),",\nso you can use ",(0,i.jsx)(n.code,{children:"YozoraParser"})," / ",(0,i.jsx)(n.code,{children:"GfmExParser"})," / ",(0,i.jsx)(n.code,{children:"GfmParser"})," directly."]})}),"\n",(0,i.jsxs)(t.c,{defaultValue:"YozoraParser",values:[{label:"Basic Usage",value:"basic-usage"},{label:"YozoraParser",value:"YozoraParser"},{label:"GfmParser",value:"GfmParser"},{label:"GfmExParser",value:"GfmExParser"}],children:[(0,i.jsxs)(a.c,{value:"basic-usage",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"./tokenizer-inline-code",children:"@yozora/tokenizer-inline-code"})," cannot be used alone, it needs to be\nregistered in ",(0,i.jsx)(n.em,{children:"Parser"})," as a plugin-in before it can be used."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:"{4,9}",children:"import { DefaultParser } from '@yozora/core-parser'\nimport ParagraphTokenizer from '@yozora/tokenizer-paragraph'\nimport TextTokenizer from '@yozora/tokenizer-text'\nimport InlineCodeTokenizer from '@yozora/tokenizer-inline-code'\n\nconst parser = new DefaultParser()\n  .useFallbackTokenizer(new ParagraphTokenizer())\n  .useFallbackTokenizer(new TextTokenizer())\n  .useTokenizer(new InlineCodeTokenizer())\n\n// parse source markdown content\nparser.parse(\"`inline code`\")\n"})})]}),(0,i.jsx)(a.c,{value:"YozoraParser",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import YozoraParser from '@yozora/parser'\n\nconst parser = new YozoraParser()\n\n// parse source markdown content\nparser.parse(\"`inline code`\")\n"})})}),(0,i.jsx)(a.c,{value:"GfmParser",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import GfmParser from '@yozora/parser-gfm'\n\nconst parser = new GfmParser()\n\n// parse source markdown content\nparser.parse(\"`inline code`\")\n"})})}),(0,i.jsx)(a.c,{value:"GfmExParser",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import GfmExParser from '@yozora/parser-gfm-ex'\n\nconst parser = new GfmExParser()\n\n// parse source markdown content\nparser.parse(\"`inline code`\")\n"})})})]}),"\n",(0,i.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Name"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Required"}),(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Default"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:'"@yozora/tokenizer-inline-code"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"priority"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"false"})}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"TokenizerPriority.ATOMIC"})})]})]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"name"}),": The unique name of the tokenizer, used to bind the token it generates,\nto determine the tokenizer that should be called in each life cycle of the\ntoken in the entire ",(0,i.jsx)(n.em,{children:"matching / parsing"})," phase."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"priority"}),": Priority of the tokenizer, determine the order of processing,\nhigh priority priority execution. interruptable. In addition, in the ",(0,i.jsx)(n.code,{children:"match-block"}),"\nstage, a high-priority tokenizer can interrupt the matching process of a\nlow-priority tokenizer."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Exception:"})," Delimiters of type ",(0,i.jsx)(n.code,{children:"full"})," are always processed before other type\ndelimiters."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"./tokenizer-inline-code",children:"@yozora/tokenizer-inline-code"})," produce ",(0,i.jsx)(n.a,{href:"./ast#inlinecode",children:"InlineCode"})," type nodes.\nSee ",(0,i.jsx)(n.a,{href:"./ast",children:"@yozora/ast"})," for full base types."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import type { Literal } from '@yozora/ast'\n\nexport const InlineCodeType = 'inlineCode'\nexport type InlineCodeType = typeof InlineCodeType\n\n/**\n * InlineCode represents a fragment of computer code, such as a file name,\n * computer program, or anything a computer could parse.\n * @see https://github.com/syntax-tree/mdast#inline-code\n * @see https://github.github.com/gfm/#code-span\n */\nexport type InlineCode = Literal<InlineCodeType>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"live-examples",children:"Live Examples"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Basic."}),"\n",(0,i.jsx)(c.c,{ids:"338"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Here two backticks are used, because the code contains a backtick. This\nexample also illustrates stripping of a single leading and trailing space."}),"\n",(0,i.jsx)(c.c,{ids:"339"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"This example shows the motivation for stripping leading and trailing spaces."}),"\n",(0,i.jsx)(c.c,{ids:"340"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Note that only one space is stripped."}),"\n",(0,i.jsx)(c.c,{ids:"341"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The stripping only happens if the space is on both sides of the string."}),"\n",(0,i.jsx)(c.c,{ids:"342"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Only ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#space",children:"spaces"}),", and not ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#unicode-whitespace",children:"unicode whitespace"}),"\nin general, are stripped in this way."]}),"\n",(0,i.jsx)(c.c,{ids:"343"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["No stripping occurs if the code span contains only ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#space",children:"spaces"}),"."]}),"\n",(0,i.jsx)(c.c,{ids:"344"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#line-ending",children:"Line endings"})," are treated like ",(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#space",children:"spaces"}),"."]}),"\n",(0,i.jsx)(c.c,{ids:"345-346"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Interior spaces are not collapsed."}),"\n",(0,i.jsx)(c.c,{ids:"347"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Note that backslash escapes do not work in code spans. All backslashes are\ntreated literally."}),"\n",(0,i.jsx)(c.c,{ids:"348"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Backslash escapes are never needed, because one can always choose a string\nof ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mi,{children:"n"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," backtick characters as delimiters, where the code does not contain\nany strings of exactly ",(0,i.jsxs)(n.span,{className:"katex",children:[(0,i.jsx)(n.span,{className:"katex-mathml",children:(0,i.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(n.semantics,{children:[(0,i.jsx)(n.mrow,{children:(0,i.jsx)(n.mi,{children:"n"})}),(0,i.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,i.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(n.span,{className:"base",children:[(0,i.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]})," backtick characters."]}),"\n",(0,i.jsx)(c.c,{ids:"349-350"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Code span backticks have higher precedence than any other inline constructs\nexcept HTML tags and autolinks. Thus, for example, this is not parsed as\nemphasized text, since the second ",(0,i.jsx)(n.code,{children:"*"})," is part of a code span."]}),"\n",(0,i.jsx)(c.c,{ids:"351"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"And this is not parsed as a link."}),"\n",(0,i.jsx)(c.c,{ids:"352"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Code spans, HTML tags, and autolinks have the same precedence. Thus, this\nis code span."}),"\n",(0,i.jsx)(c.c,{ids:"353"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"But this is an HTML tag."}),"\n",(0,i.jsx)(c.c,{ids:"354"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"And this is code."}),"\n",(0,i.jsx)(c.c,{ids:"355"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"But this is an autolink."}),"\n",(0,i.jsx)(c.c,{ids:"356"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"When a backtick string is not closed by a matching backtick string, we just\nhave literal backticks."}),"\n",(0,i.jsx)(c.c,{ids:"357-358"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The following case also illustrates the need for opening and closing\nbacktick strings to be equal in length."}),"\n",(0,i.jsx)(c.c,{ids:"359"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./ast",children:"@yozora/ast"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./parser",children:"@yozora/parser"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./parser-gfm",children:"@yozora/parser-gfm"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./parser-gfm-ex",children:"@yozora/parser-gfm-ex"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./tokenizer-fenced-code",children:"@yozora/tokenizer-fenced-code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./tokenizer-indented-code",children:"@yozora/tokenizer-indented-code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/yozorajs/yozora-react/tree/main/packages/inline-code#readme",children:"@yozora/react-inline-code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/yozorajs/yozora-react/tree/main/packages/markdown#readme",children:"@yozora/react-markdown"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/yozorajs/yozora/tree/main/tokenizers/inline-code",children:"Sourcecode"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"./ast#inlinecode",children:"InlineCode| Yozora AST"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.github.com/gfm/#code-span",children:"Code spans | Github Flavor Markdown Spec"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/syntax-tree/mdast#inlinecode",children:"InlineCode | Mdast"})}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}}}]);