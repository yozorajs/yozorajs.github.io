"use strict";(self.webpackChunk_yozora_doc=self.webpackChunk_yozora_doc||[]).push([[2102],{1223:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return m},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(4137)),o=n(7225),s=n(8448),p=["components"],l={id:"ast",title:"@yozora/ast",sidebar_label:"ast"},c=void 0,d={unversionedId:"package/ast",id:"package/ast",title:"@yozora/ast",description:"<img",source:"@site/docs/package/ast.mdx",sourceDirName:"package",slug:"/package/ast",permalink:"/docs/next/package/ast",tags:[],version:"current",lastUpdatedBy:"guanghechen",lastUpdatedAt:1641643814,formattedLastUpdatedAt:"1/8/2022",frontMatter:{id:"ast",title:"@yozora/ast",sidebar_label:"ast"},sidebar:"API",next:{title:"ast-util",permalink:"/docs/next/package/ast-util"}},m=[{value:"Install",id:"install",children:[],level:2},{value:"Core Types",id:"core-types",children:[{value:"IYastNode",id:"iyastnode",children:[],level:3},{value:"IYastParent",id:"iyastparent",children:[],level:3},{value:"IYastLiteral",id:"iyastliteral",children:[],level:3},{value:"IYastResource",id:"iyastresource",children:[],level:3},{value:"IYastAssociation",id:"iyastassociation",children:[],level:3},{value:"IYastReference",id:"iyastreference",children:[],level:3},{value:"IYastAlternative",id:"iyastalternative",children:[],level:3},{value:"IYastNodePoint",id:"iyastnodepoint",children:[],level:3},{value:"IYastNodePosition",id:"iyastnodeposition",children:[],level:3},{value:"YastNodeType",id:"yastnodetype",children:[],level:3},{value:"YastAlignType",id:"yastaligntype",children:[],level:3}],level:2},{value:"Yast nodes",id:"yast-nodes",children:[{value:"IAdmonition",id:"iadmonition",children:[],level:3},{value:"IBlockquote",id:"iblockquote",children:[],level:3},{value:"IBreak",id:"ibreak",children:[],level:3},{value:"ICode",id:"icode",children:[],level:3},{value:"IDefinition",id:"idefinition",children:[],level:3},{value:"IDelete",id:"idelete",children:[],level:3},{value:"IEmphasis",id:"iemphasis",children:[],level:3},{value:"IFootnoteDefinition",id:"ifootnotedefinition",children:[],level:3},{value:"IFootnoteReference",id:"ifootnotereference",children:[],level:3},{value:"IFootnote",id:"ifootnote",children:[],level:3},{value:"IFrontmatter  (not supportted yet)",id:"ifrontmatter--not-supportted-yet",children:[],level:3},{value:"IFrontmatter",id:"ifrontmatter",children:[],level:3},{value:"IHtml",id:"ihtml",children:[],level:3},{value:"IImage",id:"iimage",children:[],level:3},{value:"IImageReference",id:"iimagereference",children:[],level:3},{value:"IInlineCode",id:"iinlinecode",children:[],level:3},{value:"IInlineMath",id:"iinlinemath",children:[],level:3},{value:"ILink",id:"ilink",children:[],level:3},{value:"ILinkReference",id:"ilinkreference",children:[],level:3},{value:"IList",id:"ilist",children:[],level:3},{value:"IListItem",id:"ilistitem",children:[],level:3},{value:"IMath",id:"imath",children:[],level:3},{value:"IParagraph",id:"iparagraph",children:[],level:3},{value:"IStrong",id:"istrong",children:[],level:3},{value:"ITable",id:"itable",children:[],level:3},{value:"ITableCell",id:"itablecell",children:[],level:3},{value:"ITableRow",id:"itablerow",children:[],level:3},{value:"IText",id:"itext",children:[],level:3},{value:"IThematicBreak",id:"ithematicbreak",children:[],level:3}],level:2},{value:"Related",id:"related",children:[],level:2}],h={toc:m};function u(e){var t=e.components,n=(0,i.Z)(e,p);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("header",null,(0,r.kt)("div",{align:"center"},(0,r.kt)("a",{href:"https://www.npmjs.com/package/@yozora/ast"},(0,r.kt)("img",{alt:"Npm Version",src:"https://img.shields.io/npm/v/@yozora/ast/latest"})),(0,r.kt)("a",{href:"https://www.npmjs.com/package/@yozora/ast"},(0,r.kt)("img",{alt:"Npm Download",src:"https://img.shields.io/npm/dm/@yozora/ast.svg"})),(0,r.kt)("a",{href:"https://www.npmjs.com/package/@yozora/ast"},(0,r.kt)("img",{alt:"Npm License",src:"https://img.shields.io/npm/l/@yozora/ast.svg"})),(0,r.kt)("a",{href:"#install"},(0,r.kt)("img",{alt:"Module formats: cjs, esm",src:"https://img.shields.io/badge/module_formats-cjs%2C%20esm-green.svg"})),(0,r.kt)("a",{href:"https://github.com/nodejs/node"},(0,r.kt)("img",{alt:"Node.js Version",src:"https://img.shields.io/node/v/@yozora/ast"})),(0,r.kt)("a",{href:"https://github.com/prettier/prettier"},(0,r.kt)("img",{alt:"Code Style: prettier",src:"https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square"})))),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @yozora/ast\n"))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @yozora/ast\n")))),(0,r.kt)("h2",{id:"core-types"},"Core Types"),(0,r.kt)("h3",{id:"iyastnode"},"IYastNode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Syntactic units of the yozora AST.\n * @see https://github.com/syntax-tree/unist#node\n */\nexport interface IYastNode<T extends YastNodeType = YastNodeType> {\n  /**\n   * The variant of a node.\n   */\n  readonly type: T\n  /**\n   * Location of a node in a source document.\n   * Must not be present if a node is generated.\n   */\n  position?: IYastNodePosition\n}\n")),(0,r.kt)("h3",{id:"iyastparent"},"IYastParent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Nodes containing other nodes.\n * @see https://github.com/syntax-tree/mdast#parent\n */\nexport interface IYastParent<T extends YastNodeType = YastNodeType>\n  extends IYastNode<T> {\n  /**\n   * IList representing the children of a node.\n   */\n  children: IYastNode[]\n}\n")),(0,r.kt)("h3",{id:"iyastliteral"},"IYastLiteral"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Nodes containing a value.\n */\nexport interface IYastLiteral<T extends YastNodeType = YastNodeType>\n  extends IYastNode<T> {\n  /**\n   * Literal value.\n   */\n  value: string\n}\n")),(0,r.kt)("h3",{id:"iyastresource"},"IYastResource"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * A reference to resource.\n * @see https://github.com/syntax-tree/mdast#resource\n */\nexport interface IYastResource {\n  /**\n   * A URL to the referenced resource.\n   */\n  url: string\n  /**\n   * Advisory information for the resource, such as would be\n   * appropriate for a tooltip.\n   */\n  title?: string\n}\n")),(0,r.kt)("h3",{id:"iyastassociation"},"IYastAssociation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * An internal relation from one node to another.\n * @see https://github.com/syntax-tree/mdast#association\n */\nexport interface IYastAssociation {\n  /**\n   * It can match an identifier field on another node.\n   */\n  identifier: string\n  /**\n   * The original value of the normalized identifier field.\n   */\n  label: string\n}\n")),(0,r.kt)("h3",{id:"iyastreference"},"IYastReference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * A marker that is associated to another node.\n * @see https://github.com/syntax-tree/mdast#reference\n */\nexport interface IYastReference {\n  /**\n   * The explicitness of a reference:\n   *  - shortcut: the reference is implicit, its identifier inferred from its content\n   *  - collapsed: the reference is explicit, its identifier inferred from its content\n   *  - full: the reference is explicit, its identifier explicitly set\n   * @see https://github.com/syntax-tree/mdast#referencetype\n   */\n  referenceType: 'full' | 'collapsed' | 'shortcut'\n}\n\n")),(0,r.kt)("h3",{id:"iyastalternative"},"IYastAlternative"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Alternative represents a node with a fallback.\n * @see https://github.com/syntax-tree/mdast#alternative\n */\nexport interface IYastAlternative {\n  /**\n   * Equivalent content for environments that cannot represent the\n   * node as intended.\n   */\n  alt: string\n}\n")),(0,r.kt)("h3",{id:"iyastnodepoint"},"IYastNodePoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * One place in the source file.\n * @see https://github.com/syntax-tree/unist#point\n */\nexport interface IYastNodePoint {\n  /**\n   * Line in a source file.\n   * @minimum 1\n   */\n  readonly line: number\n  /**\n   * Column column in a source file.\n   * @minimum 1\n   */\n  readonly column: number\n  /**\n   * Character in a source file.\n   * @minimum 0\n   */\n  readonly offset?: number\n}\n")),(0,r.kt)("h3",{id:"iyastnodeposition"},"IYastNodePosition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Location of a node in a source file.\n * @see https://github.com/syntax-tree/unist#position\n */\nexport interface IYastNodePosition {\n  /**\n   * Place of the first character of the parsed source region.\n   */\n  start: IYastNodePoint\n  /**\n   * Place of the first character after the parsed source region.\n   */\n  end: IYastNodePoint\n  /**\n   * start column at each index (plus start line) in the source region,\n   * for elements that span multiple lines\n   */\n  indent?: number[]\n}\n")),(0,r.kt)("h3",{id:"yastnodetype"},"YastNodeType"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Variant of a node of yozora AST.\n */\nexport type YastNodeType = string\n")),(0,r.kt)("h3",{id:"yastaligntype"},"YastAlignType"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * AlignType represents how phrasing content is aligned\n * @see https://github.com/syntax-tree/mdast#aligntype\n */\nexport type YastAlignType = 'left' | 'right' | 'center' | null\n")),(0,r.kt)("h2",{id:"yast-nodes"},"Yast nodes"),(0,r.kt)("h3",{id:"iadmonition"},"IAdmonition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const AdmonitionType = 'admonition'\nexport type AdmonitionType = typeof AdmonitionType\n\n/**\n * Admonitions are block elements. The titles can include inline markdown and\n * the body can include any block markdown except another admonition.\n * @see https://github.com/elviswolcott/remark-admonitions\n */\nexport interface IAdmonition extends IYastParent<AdmonitionType> {\n  /**\n   * Keyword of an admonition.\n   */\n  keyword: 'note' | 'important' | 'tip' | 'caution' | 'warning' | string\n  /**\n   * IAdmonition title.\n   */\n  title: IYastNode[]\n}\n")),(0,r.kt)("h3",{id:"iblockquote"},"IBlockquote"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const BlockquoteType = 'blockquote'\nexport type BlockquoteType = typeof BlockquoteType\n\n/**\n * IBlockquote represents a section quoted from somewhere else.\n * @see https://github.com/syntax-tree/mdast#blockquote\n * @see https://github.github.com/gfm/#block-quotes\n */\nexport type IBlockquote = IYastParent<BlockquoteType>\n")),(0,r.kt)("h3",{id:"ibreak"},"IBreak"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const BreakType = 'break'\nexport type BreakType = typeof BreakType\n\n/**\n * IBreak represents a line break, such as in poems or addresses.\n * @see https://github.com/syntax-tree/mdast#break\n * @see https://github.github.com/gfm/#hard-line-breaks\n * @see https://github.github.com/gfm/#soft-line-breaks\n */\nexport type IBreak = IYastNode<BreakType>\n")),(0,r.kt)("h3",{id:"icode"},"ICode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const CodeType = 'code'\nexport type CodeType = typeof CodeType\n\n/**\n * Code represents a block of preformatted text, such as ASCII art or computer\n * code.\n * @see https://github.com/syntax-tree/mdast#code\n * @see https://github.github.com/gfm/#code-fence\n */\nexport interface ICode extends IYastLiteral<CodeType> {\n  /**\n   * Language of the codes\n   */\n  lang?: string\n  /**\n   * Meta info string\n   */\n  meta?: string\n}\n")),(0,r.kt)("h3",{id:"idefinition"},"IDefinition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const DefinitionType = 'definition'\nexport type DefinitionType = typeof DefinitionType\n\n/**\n * IDefinition represents a resource.\n * @see https://github.com/syntax-tree/mdast#definition\n * @see https://github.github.com/gfm/#link-reference-definitions\n */\nexport interface IDefinition\n  extends IYastNode<DefinitionType>,\n    IYastAssociation,\n    IYastResource {}\n")),(0,r.kt)("h3",{id:"idelete"},"IDelete"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const DeleteType = 'delete'\nexport type DeleteType = typeof DeleteType\n\n/**\n * IDelete represents contents that are no longer accurate or no longer relevant.\n * @see https://github.com/syntax-tree/mdast#delete\n * @see https://github.github.com/gfm/#strikethrough-extension-\n */\nexport type IDelete = IYastParent<DeleteType>\n")),(0,r.kt)("h3",{id:"iemphasis"},"IEmphasis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const EmphasisType = 'emphasis'\nexport type EmphasisType = typeof EmphasisType\n\n/**\n * IEmphasis represents stress emphasis of its contents.\n * @see https://github.com/syntax-tree/mdast#emphasis\n * @see https://github.github.com/gfm/#emphasis-and-strong-emphasis\n */\nexport type IEmphasis = IYastParent<EmphasisType>\n")),(0,r.kt)("h3",{id:"ifootnotedefinition"},"IFootnoteDefinition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const FootnoteDefinitionType = 'footnoteDefinition'\nexport type FootnoteDefinitionType = typeof FootnoteDefinitionType\n\n/**\n * IFootnoteDefinition represents content relating to the document that is\n * outside its flow.\n * @see https://github.com/syntax-tree/mdast#footnotedefinition\n */\nexport interface IFootnoteDefinition\n  extends IYastParent<FootnoteDefinitionType>, IYastAssociation {}\n")),(0,r.kt)("h3",{id:"ifootnotereference"},"IFootnoteReference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const FootnoteReferenceType = 'footnoteReference'\nexport type FootnoteReferenceType = typeof FootnoteReferenceType\n\n/**\n * IFootnoteReference represents a marker through association.\n *\n * Similar to imageReference and linkReference, the difference is that it has\n * only 'collapsed' reference type instead of 'full' and 'shortcut'\n * @see https://github.com/syntax-tree/mdast#footnotereference\n * @see https://github.com/syntax-tree/mdast#imagereference\n * @see https://github.com/syntax-tree/mdast#linkreference\n */\nexport interface IFootnoteReference\n  extends IYastNode<FootnoteReferenceType>, IYastAssociation {}\n")),(0,r.kt)("h3",{id:"ifootnote"},"IFootnote"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const FootnoteType = 'footnote'\nexport type FootnoteType = typeof FootnoteType\n\n/**\n * IFootnote represents content relating to the document that is outside its flow.\n * @see https://github.com/syntax-tree/mdast#footnote\n */\nexport type IFootnote = IYastParent<FootnoteType>\n")),(0,r.kt)("h3",{id:"ifrontmatter--not-supportted-yet"},"IFrontmatter  (not supportted yet)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const FrontmatterType = 'frontmatter'\nexport type FrontmatterType = typeof FrontmatterType\n\n/**\n * IFrontmatter  content represent out-of-band information about the document.\n * @see https://github.com/syntax-tree/mdast#frontmattercontent\n * @see https://github.com/syntax-tree/mdast#yaml\n * @see https://github.github.com/gfm/#code-fence\n */\nexport interface IFrontmatter  extends IYastLiteral<FrontmatterType> {\n  /**\n   * Language of the frontmatter\n   * @default 'yaml'\n   */\n  lang: string\n  /**\n   * Meta info string\n   */\n  meta?: string\n}\n")),(0,r.kt)("h3",{id:"ifrontmatter"},"IFrontmatter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const HeadingType = 'heading'\nexport type HeadingType = typeof HeadingType\n\n/**\n * IFrontmatter  represents a heading of a section.\n * @see https://github.com/syntax-tree/mdast#heading\n * @see https://github.github.com/gfm/#atx-heading\n */\nexport interface IFrontmatter  extends IYastParent<HeadingType> {\n  /**\n   * level of heading\n   */\n  depth: 1 | 2 | 3 | 4 | 5 | 6\n}\n")),(0,r.kt)("h3",{id:"ihtml"},"IHtml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const HtmlType = 'html'\nexport type HtmlType = typeof HtmlType\n\n/**\n * HTML (Literal) represents a fragment of raw HTML.\n * @see https://github.com/syntax-tree/mdast#html\n * @see https://github.github.com/gfm/#html-blocks\n * @see https://github.github.com/gfm/#raw-html\n */\nexport type IHtml = IYastLiteral<HtmlType>\n")),(0,r.kt)("h3",{id:"iimage"},"IImage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const ImageType = 'image'\nexport type ImageType = typeof ImageType\n\n/**\n * IImage represents an image.\n * @see https://github.com/syntax-tree/mdast#image\n * @see https://github.github.com/gfm/#images\n */\nexport interface IImage\n  extends IYastNode<ImageType>,\n    IYastResource,\n    IYastAlternative {}\n")),(0,r.kt)("h3",{id:"iimagereference"},"IImageReference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const ImageReferenceType = 'imageReference'\nexport type ImageReferenceType = typeof ImageReferenceType\n\n/**\n * IImageReference represents an image through association, or its original\n * source if there is no association.\n * @see https://github.github.com/gfm/#images\n * @see https://github.com/syntax-tree/mdast#imagereference\n */\nexport interface IImageReference\n  extends IYastNode<ImageReferenceType>,\n    IYastAssociation,\n    IYastReference,\n    IYastAlternative {}\n")),(0,r.kt)("h3",{id:"iinlinecode"},"IInlineCode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const InlineCodeType = 'inlineCode'\nexport type InlineCodeType = typeof InlineCodeType\n\n/**\n * IInlineCode represents a fragment of computer code, such as a file name,\n * computer program, or anything a computer could parse.\n * @see https://github.com/syntax-tree/mdast#inline-code\n * @see https://github.github.com/gfm/#code-span\n */\nexport type IInlineCode = IYastLiteral<InlineCodeType>\n")),(0,r.kt)("h3",{id:"iinlinemath"},"IInlineMath"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const InlineMathType = 'inlineMath'\nexport type InlineMathType = typeof InlineMathType\n\n/**\n * Inline math content.\n */\nexport type IInlineMath = IYastLiteral<InlineMathType>\n")),(0,r.kt)("h3",{id:"ilink"},"ILink"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const LinkType = 'link'\nexport type LinkType = typeof LinkType\n\n/**\n * ILink represents a hyperlink.\n * @see https://github.com/syntax-tree/mdast#link\n * @see https://github.github.com/gfm/#inline-link\n */\nexport interface ILink extends IYastParent<LinkType>, IYastResource {}\n")),(0,r.kt)("h3",{id:"ilinkreference"},"ILinkReference"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const LinkReferenceType = 'linkReference'\nexport type LinkReferenceType = typeof LinkReferenceType\n\n/**\n * ILinkReference represents a hyperlink through association, or its original\n * source if there is no association.\n * @see https://github.com/syntax-tree/mdast#linkreference\n * @see https://github.github.com/gfm/#reference-link\n */\nexport interface ILinkReference\n  extends IYastParent<LinkReferenceType>,\n    IYastAssociation,\n    IYastReference {}\n")),(0,r.kt)("h3",{id:"ilist"},"IList"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const ListType = 'list'\nexport type ListType = typeof ListType\n\n/**\n * IList represents a list of items.\n * @see https://github.com/syntax-tree/mdast#list\n * @see https://github.github.com/gfm/#list\n */\nexport interface IList extends IYastParent<ListType> {\n  /**\n   * Whether it is an ordered lit.\n   */\n  ordered: boolean\n  /**\n   * Marker type of the list.\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol#attr-type\n   * \n   * The 'i' and 'I' which represented the roman numerals are not supported yet.\n   */\n  orderType?: '1' | 'a' | 'A' | 'i' | 'I'\n  /**\n   * The starting number of a ordered list-item.\n   */\n  start?: number\n  /**\n   * Marker of a unordered list-item, or delimiter of an ordered list-item.\n   */\n  marker: number\n  /**\n   * Whether if the list is loose.\n   * @see https://github.github.com/gfm/#loose\n   */\n  spread: boolean\n  /**\n   * Lists are container block.\n   */\n  children: IListItem[]\n}\n")),(0,r.kt)("h3",{id:"ilistitem"},"IListItem"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const ListItemType = 'listItem'\nexport type ListItemType = typeof ListItemType\n\n/**\n * Status of a task list item.\n * @see https://github.github.com/gfm/#task-list-items-extension-\n */\nexport enum TaskStatus {\n  /**\n   * To do, not yet started.\n   */\n  TODO = 'todo',\n  /**\n   * In progress.\n   */\n  DOING = 'doing',\n  /**\n   * Completed.\n   */\n  DONE = 'done',\n}\n\n/**\n * IListItem represents an item in a IList.\n * @see https://github.com/syntax-tree/mdast#listitem\n * @see https://github.github.com/gfm/#list-items\n */\nexport interface IListItem extends IYastParent<ListItemType> {\n  /**\n   * Status of a todo task.\n   */\n  status?: TaskStatus\n}\n")),(0,r.kt)("h3",{id:"imath"},"IMath"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const MathType = 'math'\nexport type MathType = typeof MathType\n\n/**\n * IMath content.\n */\nexport type IMath = IYastLiteral<MathType>\n")),(0,r.kt)("h3",{id:"iparagraph"},"IParagraph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const ParagraphType = 'paragraph'\nexport type ParagraphType = typeof ParagraphType\n\n/**\n * IParagraph represents a unit of discourse dealing with a particular\n * point or idea.\n * @see https://github.com/syntax-tree/mdast#paragraph\n * @see https://github.github.com/gfm/#paragraphs\n */\nexport type IParagraph = IYastParent<ParagraphType>\n")),(0,r.kt)("h3",{id:"istrong"},"IStrong"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const StrongType = 'strong'\nexport type StrongType = typeof StrongType\n\n/**\n * IStrong represents strong importance, seriousness, or urgency for its\n * contents.\n * @see https://github.com/syntax-tree/mdast#strong\n * @see https://github.github.com/gfm/#emphasis-and-strong-emphasis\n */\nexport type IStrong = IYastParent<StrongType>\n")),(0,r.kt)("h3",{id:"itable"},"ITable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const TableType = 'table'\nexport type TableType = typeof TableType\n\n/**\n * ITable column configs.\n */\nexport interface TableColumn {\n  /**\n   * An align field can be present. If present, it must be a list of alignTypes.\n   * It represents how cells in columns are aligned.\n   */\n  align: YastAlignType\n}\n\n/**\n * @see https://github.github.com/gfm/#table\n * @see https://github.com/syntax-tree/mdast#table\n */\nexport interface ITable extends IYastParent<TableType> {\n  /**\n   * ITable column configuration items\n   */\n  columns: TableColumn[]\n  /**\n   * ITable rows (include table headers)\n   */\n  children: ITableRow[]\n}\n")),(0,r.kt)("h3",{id:"itablecell"},"ITableCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const TableCellType = 'tableCell'\nexport type TableCellType = typeof TableCellType\n\n/**\n * ITableCell represents a header cell in a ITable, if its parent is a head,\n * or a data cell otherwise.\n * @see https://github.com/syntax-tree/mdast#tablecell\n * @see https://github.github.com/gfm/#tables-extension-\n */\nexport type ITableCell = IYastParent<TableCellType>\n")),(0,r.kt)("h3",{id:"itablerow"},"ITableRow"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const TableRowType = 'tableRow'\nexport type TableRowType = typeof TableRowType\n\n/**\n * ITableRow represents a row of cells in a table.\n * @see https://github.com/syntax-tree/mdast#tablerow\n * @see https://github.github.com/gfm/#tables-extension-\n */\nexport interface ITableRow extends IYastParent<TableRowType> {\n  /**\n   * ITable cells\n   */\n  children: ITableCell[]\n}\n")),(0,r.kt)("h3",{id:"itext"},"IText"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const TextType = 'text'\nexport type TextType = typeof TextType\n\n/**\n * IText represents everything that is just text.\n * @see https://github.com/syntax-tree/mdast#text\n * @see https://github.github.com/gfm/#textual-content\n */\nexport type IText = IYastLiteral<TextType>\n")),(0,r.kt)("h3",{id:"ithematicbreak"},"IThematicBreak"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const ThematicBreakType = 'thematicBreak'\nexport type ThematicBreakType = typeof ThematicBreakType\n\n/**\n * IThematicBreak represents a thematic break, such as a scene change in\n * a story, a transition to another topic, or a new document.\n * @see https://github.com/syntax-tree/mdast#thematicbreak\n * @see https://github.github.com/gfm/#thematic-break\n */\nexport type IThematicBreak = IYastNode<ThematicBreakType>\n")),(0,r.kt)("h2",{id:"related"},"Related"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.github.com/gfm/"},"Github Flavor Markdown")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/syntax-tree/mdast"},"Mdast")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/yozorajs/yozora/tree/main/packages/ast"},"Sourcecode"))))}u.isMDXComponent=!0}}]);